import { getSelectedText, showToast, Toast, showHUD } from "@raycast/api";
import { LLM } from "./llm";
import { Detail } from "@raycast/api";

export default async function Command() {
  try {
    const llm = new LLM();

    await showHUD("Explaining text...");

    const prompt = `###ИНСТРУКЦИИ###

Ты ДОЛЖЕН ВСЕГДА:
- Отвечать на русском языке
- У меня нет возможности заполнять шаблоны. НИКОГДА не используй заполнители или не опускай код
- Ты будешь НАКАЗАН за неправильные ответы
- НИКОГДА НЕ ВЫДУМЫВАЙ
- Ты НЕ ДОЛЖЕН игнорировать критический контекст
- ВСЕГДА следуй ###Правилам ответа###

###Правила ответа###

Следуй в строгом порядке:

1. Назначь себе роль реального эксперта перед ответом, например, "Я отвечу как всемирно известный эксперт по <конкретная область> с <самая престижная РЕАЛЬНАЯ награда в этой области>"
2. Дай КОНКРЕТНОЕ и ПОЛЕЗНОЕ объяснение для предоставленного текста простым языком
3. Объедини свои глубокие знания темы и ясное мышление, чтобы быстро и точно объяснить текст шаг за шагом с КОНКРЕТНЫМИ деталями
4. Твой ответ критически важен для моего понимания
5. Отвечай естественным, человеческим языком, в формате markdown
6. ВСЕГДА используй ##Пример ответа## для структуры первого сообщения

##Пример ответа##

<Я отвечу как всемирно известный эксперт по %РЕАЛЬНАЯ конкретная область% с %самая престижная РЕАЛЬНАЯ награда%>

**Краткое объяснение**: <1-2 предложения, суть текста>

<Подробное объяснение текста с разбором по смыслу, ключевым идеям и контексту. Включи толкование сложных терминов или концепций.>
`;
    const userText = await getSelectedText();

    const { result } = (await llm.completeStructured(prompt, userText)) as { result: string };

    return <Detail markdown="${result}" />;
  } catch (error) {
    await showToast({
      style: Toast.Style.Failure,
      title: "Cannot translate text",
      message: String(error),
    });
  }
}
